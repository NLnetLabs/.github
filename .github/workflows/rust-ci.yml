name: Rust CI
on:
  workflow_call:
    inputs:
      rust_msrv:
        description: >
          The minimum support Rust version to test the project with,
          e.g. 1.71.0.
        required: true
        type: string
      test_minimal_version:
        description: > 
          If non-empty, test using minimal dependency versions from Cargo.toml
          and the Rust version provided.
        required: false
        type: string
        default: ""
      check_fmt:
        description: Whether to run a cargo fmt check.
        required: false
        type: boolean
        default: false
jobs:
  build-and-test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: ["${{ inputs.rust_msrv }}", stable, beta, nightly]
    env:
        RUSTFLAGS: "-D warnings"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}

    # Clippy.
    #
    # Only do this once with all features enabled.
    # Only do Clippy on stable for the moment, due to
    # clippy::unknown_clippy_lints being removed.
    - if: matrix.rust == 'stable'
      name: Run Clippy.
      run: cargo clippy --all --all-features -- -D warnings

    # Fmt.
    - if: inputs.check_fmt && matrix.rust == 'stable' && matrix.os = 'ubuntu-latest'
      name: Check formatting.
      run: cargo fmt --all -- --check

    # Build & Test
    - run: cargo test --all --all-features
    - run: cargo check --no-default-features --all --all-features

  minimal-versions:
    name: Check minimal versions
    if: inputs.test_minimal_version != ""
    runs-on: ubuntu-latest
    env:
        RUSTFLAGS: "-D warnings"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: "${{ inputs.test_minimal_version }}"
    - name: Install nightly Rust
      run: rustup install nightly
    - name: Check with minimal-versions
      run: |
        cargo +nightly update -Z minimal-versions
        cargo check --all-features --all-targets --locked

